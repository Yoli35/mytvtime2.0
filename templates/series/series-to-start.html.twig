{% extends 'base.html.twig' %}

{% block title %}my Tv Time â†’ {{ 'Series to start'|trans }}{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('styles/home.scss') }}">
    <link rel="stylesheet" href="{{ asset('styles/series.scss') }}">
{% endblock %}

{% block body %}
    {% include('_blocks/_menu.html.twig') %}
    <div class="container-fluid series-to-start">
        <h1>{{ 'Series to start'|trans }}</h1>
        {% if userSeriesCount < 20 %}
            {{ include('_blocks/series/_search.html.twig') }}
        {% endif %}
        {% if seriesToStart|length %}
            <header>
                <div class="infos">{{ 'Series to start'|trans }} ({{ seriesToStart|length }})</div>
                <label for="filter-by-name">
                    <input type="search" id="filter-by-name" placeholder="{{ 'Search'|trans }}">
                </label>
                <div class="radio-group">
                    <span>{{ 'Sort by'|trans }}</span>
                    <label for="sort-by-first-air-date">{{ 'First air date'|trans }}
                        <input type="radio" name="sort-by" id="sort-by-first-air-date" value="first_air_date" checked>
                    </label>
                    <label for="sort-by-added-at">{{ 'Date added'|trans }}
                        <input type="radio" name="sort-by" id="sort-by-added-at" value="added_at">
                    </label>
                </div>
                <div class="radio-group">
                    <label for="order-desc" data-title="{{ 'Newer first'|trans }}">{{ ux_icon('mdi:arrow-down') }}
                        <input type="radio" name="order-by" id="order-desc" value="DESC" checked>
                    </label>
                    <label for="order-asc" data-title="{{ 'Older first'|trans }}">{{ ux_icon('mdi:arrow-up') }}
                        <input type="radio" name="order-by" id="order-asc" value="ASC">
                    </label>
                </div>
            </header>
            <div class="series-group user">
                <div class="wrapper">
                    <div class="content center">
                        {% for series in seriesToStart %}
                            {{ include('_blocks/series/_card2Start.html.twig') }}
                        {% endfor %}
                    </div>
                </div>
            </div>
        {% endif %}
        <div id="global-data" class="hidden">
            {
            "tmdbIds": {{ tmdbIds|json_encode|raw }},
            "app_series_tmdb_check": "{{ path('app_series_tmdb_check') }}"
            }
        </div>
        <div id="svgs" style="display: none">
            <div id="svg-xmark">{{ ux_icon('mdi:close') }}</div>
        </div>
        {% include('_blocks/_footer.html.twig') %}
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        window.addEventListener("DOMContentLoaded", init);

        function init() {
            /** @type {HTMLInputElement} */
            const filterByName = document.getElementById('filter-by-name');
            filterByName.addEventListener('input', filterSeries);
            filterByName.focus();
            setTimeout(() => {
                filterSeries({target: filterByName});
            }, 1000);

            const sortBy = document.querySelectorAll('input[name="sort-by"]');
            sortBy.forEach((input) => {
                input.addEventListener('change', sortSeries);
            });
            const orderBy = document.querySelectorAll('input[name="order-by"]');
            orderBy.forEach((input) => {
                input.addEventListener('change', sortSeries);
            });
            sortSeries();
        }

        function sortSeries() {
            const series = document.querySelectorAll('.series-group.user .content .card');
            const sortBy = document.querySelector('input[name="sort-by"]:checked').value;
            const orderBy = document.querySelector('input[name="order-by"]:checked').value;
            const sortedSeries = Array.from(series).sort((a, b) => {
                let aValue, bValue;
                if (sortBy === 'first_air_date') {
                    aValue = new Date(a.dataset.firstAirDate);
                    bValue = new Date(b.dataset.firstAirDate);
                } else {
                    aValue = new Date(a.dataset.addedAt);
                    bValue = new Date(b.dataset.addedAt);
                }
                return orderBy === 'DESC' ? bValue - aValue : aValue - bValue;
            });
            const content = document.querySelector('.series-group.user .content');
            content.innerHTML = '';
            sortedSeries.forEach((s) => {
                content.appendChild(s);
            });
        }

        function filterSeries(e) {
            const filter = e.target.value.toLowerCase();
            const series = document.querySelectorAll('.series-group.user .content .card');
            series.forEach((s) => {
                const title = s.querySelector('.name').textContent.toLowerCase();
                if (title.includes(filter)) {
                    s.style.display = "block";
                    setTimeout(() => {
                        s.style.opacity = "1";
                        s.style.width = "15rem";
                    }, 0);
                } else {
                    s.style.opacity = "0.125";
                    s.style.width = "0";
                    setTimeout(() => {
                        s.style.display = "none";
                    }, 300);
                }
            });
        }
    </script>
{% endblock %}
