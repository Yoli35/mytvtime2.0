{% extends 'base.html.twig' %}

{% block title %}my Tv Time → {{ 'Series'|trans }} → {{ tv.localized_name.name ?? series.name }}{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('styles/contact.scss') }}">
    <link rel="stylesheet" href="{{ asset('styles/series.scss') }}">
    <link rel="stylesheet" href="{{ asset('styles/user.scss') }}">
{% endblock %}
{% block body %}
    <script>
        const bd = '/series/posters{{ series.posterPath }}';
        const body = document.querySelector("body");
        body.style.backgroundSize = "cover";
        body.style.backgroundPosition = "center";
        body.style.backgroundRepeat = "no-repeat";
        body.style.backgroundAttachment = "fixed";
        body.style.backgroundImage = "url(" + bd + ")";
    </script>
    {% include '_blocks/_menu.html.twig' %}
    <div class="container-fluid backgroundImageOverlay">
        <div class="series-show">
            <div class="header">
                <div class="poster">
                    {% if series.posterPath %}
                    <img src="/series/posters{{ series.posterPath }}" alt="{{ series.name }}">
                    {% else %}
                    <div>{{ 'No poster'|trans }}</div>
                    {% endif %}
                    <div class="progress" data-value="{{ userSeries.progress }}">
                        <div class="progress-bar"></div>
                    </div>
                </div>
                <div class="infos">
                    <div class="backdrop">
                        <img src="/series/backdrops{{ tv.backdrop_path }}" alt="{{ series.name }}">
                    </div>
                    <div class="name">
                        <h1>
                            {% if tv.localized_name %}
                                <span class="localized-name-span">{{ tv.localized_name.name }}</span>
                            {% endif %}
                            <span class="name-span">{{ series.name }} ({{ series.firstAirDate|date("Y") }})</span>
                        </h1>
                        <div class="series-tools">
                            <div class="series-tools-click">
                                {{ ux_icon('fa6-solid:ellipsis-vertical', {height: '18px', width: '18px'}) }}
                            </div>
                            <div class="series-tools-menu">
                                <div id="localized-name">{{ 'Suggest a localized name'|trans }}</div>
                                <div id="localized-overview">{{ 'Add a localized overview'|trans }}</div>
                                <div id="additional-overview">{{ 'Add an additional overview'|trans }}</div>
                            </div>
                        </div>
                    </div>
                    {{ include('_blocks/forms/_delete-overview.html.twig') }}
                    {{ include('_blocks/forms/_localized-name.html.twig', {media: tv}) }}
                    {{ include('_blocks/forms/_overview.html.twig', {media: tv}) }}
                    <h5>
                        {% set n = series.visitNumber %}
                        {% if n > 1000 %}
                            {% set n = (n / 1000)|round(1, 'floor') ~ 'k' %}
                        {% endif %}
                        {{ n }} {{ (n > 1 ? 'visits':'visit')|trans }}
                    </h5>
                    <div class="series-overview">{{ tv.overview }}</div>
                    {% if tv.localized_overviews|length %}
                        <h4 class="localized-h4">{{ 'Localized overviews'|trans }}</h4>
                        <div class="localized overviews">
                            {% for overview in tv.localized_overviews %}
                                <div class="localized overview" data-id="{{ overview.id }}">
                                    <div class="content">
                                        {{ overview.overview|nl2br }}
                                    </div>
                                    <div class="tools">
                                        <div class="locale">{{ overview.locale|upper }}</div>
                                        <div class="edit" data-id="{{ overview.id }}" data-title="{{ 'Edit'|trans }}">
                                            {{ ux_icon('fa6-solid:pen', {height: '18px', width: '18px'}) }}
                                        </div>
                                        <div class="delete" data-id="{{ overview.id }}" data-title="{{ 'Delete'|trans }}">
                                            {{ ux_icon('fa6-solid:trash', {height: '18px', width: '18px'}) }}
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    {% endif %}
                    {% if tv.additional_overviews|length %}
                        <h4 class="additional-h4">{{ 'Additional overviews'|trans }}</h4>
                        <div class="additional overviews">
                            {% for overview in tv.additional_overviews %}
                                <div class="additional overview" data-id="{{ overview.id }}">
                                    <div class="content">
                                        {{ overview.overview|nl2br }}
                                    </div>
                                    <div class="tools">
                                        {% if overview.source %}
                                            <div class="source">
                                                {% if overview.source.path %}
                                                    <a href="{{ overview.source.path }}" data-title="{{ overview.source.name }}" target="_blank" rel="noopener noreferrer">
                                                        {% if overview.source.LogoPath %}
                                                            <img src="{{ overview.source.LogoPath }}" alt="{{ overview.source.name }}">
                                                        {% else %}
                                                            {{ overview.source.name }}
                                                        {% endif %}
                                                    </a>
                                                {% else %}
                                                    {{ overview.source.name }}
                                                {% endif %}
                                            </div>
                                            <div class="locale">{{ overview.locale|upper }}</div>
                                        {% endif %}
                                        <div class="edit" data-id="{{ overview.id }}" data-title="{{ 'Edit'|trans }}">
                                            {{ ux_icon('fa6-solid:pen', {height: '18px', width: '18px'}) }}
                                        </div>
                                        <div class="delete" data-id="{{ overview.id }}" data-title="{{ 'Delete'|trans }}">
                                            {{ ux_icon('fa6-solid:trash', {height: '18px', width: '18px'}) }}
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    {% endif %}
                    {% if series.updates %}
                        <h4>{{ 'Updates'|trans }}</h4>
                        <div class="updates">
                            <div class="wrapper">
                                {% for update in series.updates %}
                                    <div class="update">{{ update|trans }}</div>
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}
                </div>
            </div>

            {% if series.nextEpisodeAirDate %}
                <div class="schedules">
                    {% set neta = tv.next_episode_to_air %}
                    <div class="next-episode">{{ "S%02dE%02d"|format(neta.season_number, neta.episode_number) }} - {{ neta.name }} - {{ series.nextEpisodeAirDate|format_date("relative_full")|capitalize }}</div>

                    {% if series.schedules|length %}
                        {% set schedules = series.schedules %}
                        <div class="wrapper">
                            {% for schedule in schedules %}
                                <div class="schedule">
                                    {% set country = user.country ?? 'FR' %}
                                    <div class="country" data-title="{{ schedule.country|country_name }}">{{ getEmojiFlag(schedule.country) }}</div>
                                    <div class="air">{{ schedule.firstAirDate|format_datetime(pattern="cccc - H:mm")|capitalize }}</div>
                                    <div>
                                        {{ ux_icon('fa6-solid:arrow-right', {height: '18px', width: '18px'}) }}
                                    </div>
                                    <div class="country" data-title="{{ country|country_name }}">{{ getEmojiFlag(country) }}</div>
                                    <div class="local-air">{{ schedule.originalDate|format_datetime(pattern="cccc - H:mm")|capitalize }}</div>
                                </div>
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
            {% endif %}

            {% if userSeries %}
                <div class="user-actions">
                    <div class="watch-links">
                        <div class="label">{{ 'Watch links'|trans }}</div>
                        {% for link in series.watchLinks %}
                            <a href="{{ link.url }}" target="_blank" rel="noopener noreferrer">
                                <div class="watch-link">
                                    {% if link.providerId %}
                                        <img src="{{ providers.logos[link.providerId] }}" alt="{{ providers.names[link.providerId] }}" data-title="{{ link.name ?? providers.names[link.providerId] }}">
                                    {% else %}
                                        <span>{{ link.name }}</span>
                                    {% endif %}
                                </div>
                            </a>
                        {% endfor %}
                        <div class="add-watch-link" data-title="{{ 'Add a watch link'|trans }}">
                            {{ ux_icon('fa6-solid:plus', {height: '18px', width: '18px'}) }}
                        </div>
                    </div>
                    <div class="watch-link-form">
                        <form class="form" action="" id="watch-link-form">
                            <div class="form-row">
                                <div class="form-field">
                                    <label for="provider">{{ 'Provider'|trans }}
                                        <select name="provider" id="provider">
                                            <option value="">{{ 'Select a provider'|trans }}</option>
                                            {% for name, id in providers.select %}
                                                <option value="{{ id }}">{{ name }}</option>
                                            {% endfor %}
                                        </select>
                                    </label>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-field">
                                    <label for="name">{{ 'Name'|trans }}
                                        <input type="text" name="name" id="name" required>
                                        <span class="error"></span>
                                    </label>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-field">
                                    <label for="url">{{ 'URL'|trans }}
                                        <input type="url" name="url" id="url" required>
                                        <span class="error"></span>
                                    </label>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-field">
                                    <button type="button">{{ 'Cancel'|trans }}</button>
                                    <button type="submit">{{ 'Add'|trans }}</button>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="rating">
                        <div class="rating-stars">
                            <div class="stars" data-trans-rating="Cancel rating|{{ 'Cancel rating'|trans }}" data-trans-star="star|{{ 'star'|trans }}" data-trans-stars="stars|{{ 'stars'|trans }}">
                                <div class="star {{ userSeries.rating >= 1 ? "active" }}" data-value="1" data-title="{{ (userSeries.rating >= 1 ? "Cancel rating":"x star")|trans({'x': 1}) }}">
                                    {{ ux_icon('fa6-solid:star', {height: '18px', width: '18px'}) }}
                                </div>
                                <div class="star {{ userSeries.rating >= 2 ? "active" }}" data-value="2" data-title="{{ (userSeries.rating >= 2 ? "Cancel rating":"x stars")|trans({'x': 2}) }}">
                                    {{ ux_icon('fa6-solid:star', {height: '18px', width: '18px'}) }}
                                </div>
                                <div class="star {{ userSeries.rating >= 3 ? "active" }}" data-value="3" data-title="{{ (userSeries.rating >= 3 ? "Cancel rating":"x stars")|trans({'x': 3}) }}">
                                    {{ ux_icon('fa6-solid:star', {height: '18px', width: '18px'}) }}
                                </div>
                                <div class="star {{ userSeries.rating >= 4 ? "active" }}" data-value="4" data-title="{{ (userSeries.rating >= 4 ? "Cancel rating":"x stars")|trans({'x': 4}) }}">
                                    {{ ux_icon('fa6-solid:star', {height: '18px', width: '18px'}) }}
                                </div>
                                <div class="star {{ userSeries.rating >= 5 ? "active" }}" data-value="5" data-title="{{ (userSeries.rating >= 5 ? "Cancel rating":"x stars")|trans({'x': 5}) }}">
                                    {{ ux_icon('fa6-solid:star', {height: '18px', width: '18px'}) }}
                                </div>
                            </div>
                        </div>
                    </div>
                    {% if userSeries.marathoner or userSeries.binge %}
                        <div class="badges">
                            {% if userSeries.binge %}
                                <div class="badge" data-title="{{ 'A real binger!'|trans }}">
                                    {{ ux_icon('fa:coffee', {height: '18px', width: '18px'}) }}
                                </div>
                            {% endif %}
                            {% if userSeries.marathoner %}
                                <div class="badge" data-title="{{ 'A real marathoner!'|trans }}">
                                    {{ ux_icon('fa6-solid:bolt', {height: '18px', width: '18px'}) }}
                                </div>
                            {% endif %}
                        </div>
                    {% endif %}
                    <div class="actions">
                        <div class="action toggle-pinned-series{% if userSeries.userPinnedSeries %} pinned{% endif %}" data-title="{{ (userSeries.userPinnedSeries ? "Remove from pinned series" : "Add to pinned series")|trans }}">
                            {{ ux_icon('fa6-solid:paperclip', {height: '18px', width: '18px'}) }}
                        </div>
                        <div class="action toggle-favorite-series{% if userSeries.favorite %} favorite{% endif %}" data-title="{{ (userSeries.favorite ? "Remove from favorites" : "Add to favorites")|trans }}">
                            {{ ux_icon('fa6-solid:heart', {height: '18px', width: '18px'}) }}
                        </div>
                        <div class="action remove-this-series" data-title="{{ 'Remove this series from your watchlist'|trans }}">
                            {{ ux_icon('fa6-solid:trash', {height: '18px', width: '18px'}) }}
                        </div>
                    </div>
                </div>
            {% endif %}

            <div class="content">
                <div class="left">
                    <div class="all-seasons">
                        <div>{{ 'Seasons'|trans }}</div>
                        {% if tv.seasons|length > 1 %}
                            <div class="season-order">
                                {{ ux_icon('fa6-solid:arrow-down', {height: '18px', width: '18px'}) }}
                            </div>
                        {% endif %}
                    </div>
                    <div class="seasons-episodes">
                        {% for season in tv.seasons %}
                            <a href="{{ path('app_series_season', {id: series.id, seasonNumber: season.season_number, slug: tv.localized_name.slug ?? series.slug}) }}">
                                <div class="season-episode">
                                    <div class="poster">
                                        {% if season.poster_path %}
                                            <img src="{{ season.poster_path }}" alt="{{ season.name }}">
                                        {% else %}
                                            <div>{{ 'No poster'|trans }}</div>
                                        {% endif %}
                                        <div class="number">
                                            {{ season.season_number }}
                                        </div>
                                    </div>
                                    <div class="infos">
                                        <div class="name">{{ season.name }}</div>
                                        {% if season.overview %}
                                            <div class="overview">{{ season.overview }}</div>
                                        {% endif %}
                                        <div class="air-date">{{ 'Air date'|trans }}
                                            {% if season.air_date %}
                                                {{ date(season.air_date)|format_date('relative_long') }}
                                            {% else %}
                                                {{ 'TBA'|trans }}
                                            {% endif %}
                                        </div>
                                        {% if userSeries.lastSeason is not null and userSeries.lastSeason == season.season_number %}
                                            <div class="air-date">{{ 'Last seen'|trans }} {{ date(userSeries.lastWatchAt)|format_date('relative_long') }}</div>
                                        {% endif %}
                                        <div class="episodes">
                                            {{ season.episode_count }} {{ (season.episode_count>1?'episodes':'episode')|trans }}
                                            <div class="watched"></div>
                                            {% set viewedEpisodes = userSeries.userEpisodes|filter(ue => ue.seasonNumber == season.season_number and ue.watchAt)|length %}
                                            {% if viewedEpisodes == 0 %}
                                                {{ 'No episode seen'|trans }}
                                            {% elseif viewedEpisodes == 1 %}
                                                {{ '1 episode seen'|trans }}
                                            {% elseif viewedEpisodes == season.episode_count %}
                                                {{ 'All episodes seen'|trans }}
                                            {% else %}
                                                {{ viewedEpisodes }} {{ 'episodes seen'|trans }}
                                            {% endif %}
                                        </div>
                                    </div>
                                </div>
                            </a>
                        {% endfor %}
                    </div>
                    {% if tv.credits.cast|length %}
                        <h3>{{ 'Cast'|trans }}</h3>
                        <div class="cast">
                            <div class="wrapper">
                                {% for people in tv.credits.cast %}
                                    <a href="{{ path('app_series_people', {id: people.id, slug: people.slug}) }}">
                                        <div class="people" data-title="{{ people.name }}">
                                            <div class="photo">
                                                {% if people.profile_path %}
                                                    <img src="{{ people.profile_path }}" alt="{{ people.name }}">
                                                {% else %}
                                                    {{ 'No picture'|trans }}
                                                {% endif %}
                                            </div>
                                            <div class="infos">
                                                <div class="name">{{ people.name }}</div>
                                                <div>{{ people.character }}</div>
                                            </div>
                                        </div>
                                    </a>
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}

                    {% if tv.credits.crew|length %}
                        <h3>{{ 'Crew'|trans }}</h3>
                        <div class="crew">
                            <div class="wrapper">
                                {% for people in tv.credits.crew %}
                                    <a href="{{ path('app_series_people', {id: people.id, slug: people.slug}) }}">
                                        <div class="people" data-title="{{ people.name }}">
                                            <div class="photo">
                                                {% if people.profile_path %}
                                                    <img src="{{ people.profile_path }}" alt="{{ people.name }}">
                                                {% else %}
                                                    {{ 'No picture'|trans }}
                                                {% endif %}
                                            </div>
                                            <div class="infos">
                                                <div class="name">{{ people.name }}</div>
                                                <div>{{ people.job ~ ' - ' ~ people.department }}</div>
                                            </div>
                                        </div>
                                    </a>
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}
                </div>
                <div class="right">
                    {% if tv['watch/providers'].flatrate|length %}
                        <h3>{{ 'Where to watch'|trans }}</h3>
                        <div class="providers">
                            <div class="wrapper">
                                {% for provider in tv['watch/providers'].flatrate %}
                                    <div class="provider" data-title="{{ provider.provider_name }}">
                                        <img src="{{ provider.logo_path }}" alt="{{ provider.provider_name }}">
                                        <div>{{ provider.provider_name }}</div>
                                    </div>
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}

                    {% if tv['watch/providers'].rent|length %}
                        <h3>{{ 'Where to rent'|trans }}</h3>
                        <div class="providers">
                            <div class="wrapper">
                                {% for provider in tv['watch/providers'].rent %}
                                    <div class="provider" data-title="{{ provider.provider_name }}">
                                        <img src="{{ provider.logo_path }}" alt="{{ provider.provider_name }}">
                                        <div>{{ provider.provider_name }}</div>
                                    </div>
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}

                    {% if tv['watch/providers'].buy|length %}
                        <h3>{{ 'Where to buy'|trans }}</h3>
                        <div class="providers">
                            <div class="wrapper">
                                {% for provider in tv['watch/providers'].buy %}
                                    <div class="provider" data-title="{{ provider.provider_name }}">
                                        <img src="{{ provider.logo_path }}" alt="{{ provider.provider_name }}">
                                        <div>{{ provider.provider_name }}</div>
                                    </div>
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}

                    <h3>{{ 'Key facts'|trans }}</h3>
                    <div class="facts">
                        <div class="fact">
                            <div class="fact-label">{{ 'Original name'|trans }}</div>
                            <div class="fact-content">{{ tv.original_name }}</div>
                        </div>
                        <div class="fact">
                            <div class="fact-label">{{ 'Original language'|trans }}</div>
                            <div class="fact-content">{{ tv.original_language|language_name }}</div>
                        </div>
                        <div class="fact">
                            <div class="fact-label">{{ 'Original Country'|trans }}</div>
                            {% for country in tv.origin_country %}
                                <div class="fact-content">{{ getEmojiFlag(country) ~ ' ' ~ country|country_name }}</div>
                            {% endfor %}
                        </div>
                        <div class="fact">
                            <div class="fact-label">{{ 'Status'|trans }}</div>
                            <div class="fact-content">{{ tv.status|trans }}</div>
                        </div>
                        {% if tv.networks|length %}
                            <div class="fact">
                                <div class="fact-label">{{ (tv.networks|length>1?'Networks':'Network')|trans }}</div>
                                <div class="networks">
                                    {% for network in tv.networks %}
                                        <div class="network-detail">
                                            <div class="frame">
                                                {% if network.logo_path %}
                                                    <img src="{{ network.logo_path }}" alt="{{ network.name }}" loading="lazy">
                                                {% else %}
                                                    {{ network.name }}
                                                {% endif %}
                                            </div>
                                        </div>
                                    {% endfor %}
                                </div>
                            </div>
                        {% endif %}
                        {% if tv.keywords.results|length %}
                            <div class="fact">
                                <div class="keywords">
                                    {% for k in tv.keywords.results %}
                                        <div class="keyword" data-title="{{ k.name|trim|trans([], 'keywords') }}">{{ k.name }}</div>
                                    {% endfor %}
                                </div>
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
        {% include '_blocks/_footer.html.twig' %}
    </div>
    <div id="globs" style="display: none">
        {
        "seriesId": {{ series.id }},
        "providers": {{ providers|json_encode(constant('JSON_PRETTY_PRINT'))|raw }},
        "translations": {{ translations|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}
        }
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        /**
         * @typedef Globs
         * @type {Object}
         * @property {number} seriesId
         * @property {Array} providers
         * @property {Array} translations
         */
        /**
         * @typedef Source
         * @type {Object}
         * @property {string} name
         * @property {string} path
         * @property {string} logoPath
         */
        document.addEventListener('DOMContentLoaded', function () {
            /** @var {Globs} */
            const jsonGlobsObject = JSON.parse(document.querySelector('div#globs').textContent);
            const providers = jsonGlobsObject.providers;
            const seriesId = jsonGlobsObject.seriesId;
            const translations = jsonGlobsObject.translations;

            const progressDiv = document.querySelector('.progress');
            const progressBarDiv = document.querySelector('.progress-bar');
            const progress = progressDiv.getAttribute('data-value');
            progressBarDiv.classList.add('set');
            progressBarDiv.style.width = progress + '%';
            progressBarDiv.setAttribute('aria-valuenow', progress);

            const userActions = document.querySelector('.user-actions');
            const lang = document.documentElement.lang;
            if (userActions) {
                const stars = userActions.querySelectorAll('.star');
                stars.forEach(function (star) {
                    star.addEventListener('click', function () {
                        const active = this.classList.contains('active');
                        const value = active ? 0 : this.getAttribute('data-value');
                        fetch('/' + lang + '/series/rating/' + {{ userSeries.id }}, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({rating: value})
                        }).then(function (response) {
                            if (response.ok) {
                                const transRating = stars[0].parentElement.getAttribute('data-trans-rating').split('|')[lang === 'en' ? 0 : 1];
                                const transStar = stars[0].parentElement.getAttribute('data-trans-star').split('|')[lang === 'en' ? 0 : 1];
                                const transStars = stars[0].parentElement.getAttribute('data-trans-stars').split('|')[lang === 'en' ? 0 : 1];
                                stars.forEach(function (star) {
                                    star.classList.remove('active');
                                    if (star.getAttribute('data-value') <= value) {
                                        star.setAttribute('data-title', transRating);
                                    } else {
                                        const v = star.getAttribute('data-value');
                                        star.setAttribute('data-title', v + ' ' + (v > 1 ? transStars : transStar));
                                    }
                                });
                                for (let i = 0; i < value; i++) {
                                    stars[i].classList.add('active');
                                }
                            }
                        });
                    });
                });
            }

            const pinned = userActions.querySelector('.toggle-pinned-series');
            pinned.addEventListener('click', function () {
                const isPinned = this.classList.contains('pinned');
                fetch('/' + lang + '/series/pinned/' + {{ userSeries.id }}, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({newStatus: isPinned ? 0 : 1})
                }).then(function (response) {
                    if (response.ok) {
                        window.location.reload();
                    }
                });
            });

            const favorite = userActions.querySelector('.toggle-favorite-series');
            favorite.addEventListener('click', function () {
                const isFavorite = this.classList.contains('favorite');
                fetch('/' + lang + '/series/favorite/' + {{ userSeries.id }}, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({favorite: isFavorite ? 0 : 1})
                }).then(function (response) {
                    if (response.ok) {
                        favorite.classList.toggle('favorite');
                        if (favorite.classList.contains('favorite')) {
                            favorite.setAttribute('data-title', translations['Remove from favorites']);
                        } else {
                            favorite.setAttribute('data-title', translations['Add to favorites']);
                        }
                    }
                });
            });

            const removeThisSeries = userActions.querySelector('.remove-this-series');
            removeThisSeries.addEventListener('click', function () {
                fetch('/' + lang + '/series/remove/' + {{ userSeries.id }}, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(function (response) {
                    if (response.ok) {
                        window.location.href = '/' + lang + '/series/tmdb/{{ series.tmdbId }}-{{ series.slug }}';
                    }
                });
            });

            const addWatchLink = document.querySelector('.add-watch-link');
            const watchLinkForm = document.querySelector('.watch-link-form');
            const form = document.querySelector('#watch-link-form');
            const cancel = form.querySelector('button[type="button"]');
            const submit = form.querySelector('button[type="submit"]');

            addWatchLink.addEventListener('click', function () {
                watchLinkForm.classList.add('display');
                setTimeout(function () {
                    watchLinkForm.classList.add('active');
                }, 0);
            });
            cancel.addEventListener('click', function () {
                watchLinkForm.classList.remove('active');
                setTimeout(function () {
                    watchLinkForm.classList.remove('display');
                }, 300);
            });
            submit.addEventListener('click', function (event) {
                event.preventDefault();

                const provider = form.querySelector('#provider');
                const name = form.querySelector('#name');
                const url = form.querySelector('#url');
                const errors = form.querySelectorAll('.error');
                errors.forEach(function (error) {
                    error.textContent = '';
                });
                if (!provider.value) {
                    provider.value = null;
                }
                if (!name.value) {
                    name.nextElementSibling.textContent = '{{ 'This field is required'|trans }}';
                }
                if (!url.value) {
                    url.nextElementSibling.textContent = '{{ 'This field is required'|trans }}';
                }
                if (name.value && url.value) {
                    fetch('/' + lang + '/series/add/watch/link/' + {{ series.id }}, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({provider: provider.value, name: name.value, url: url.value})
                    }).then(function (response) {
                        if (response.ok) {
                            watchLinkForm.classList.remove('active');
                            setTimeout(function () {
                                watchLinkForm.classList.remove('display');
                            }, 300);
                            const watchLinks = document.querySelector('.watch-links');
                            const newLink = document.createElement('a');
                            newLink.href = url.value;
                            newLink.target = '_blank';
                            newLink.rel = 'noopener noreferrer';
                            if (provider.value) {
                                const watchLink = document.createElement('div');
                                watchLink.classList.add('watch-link');
                                const img = document.createElement('img');
                                img.src = providers.logos[provider.value];
                                img.alt = providers.names[provider.value];
                                img.setAttribute('data-title', name.value);
                                watchLink.appendChild(img);
                                newLink.appendChild(watchLink);
                            } else {
                                const watchLink = document.createElement('div');
                                watchLink.classList.add('watch-link');
                                const span = document.createElement('span');
                                span.textContent = name.value;
                                watchLink.appendChild(span);
                                newLink.appendChild(watchLink);
                            }
                            watchLinks.insertBefore(newLink, watchLinks.lastElementChild);
                            provider.value = '';
                            name.value = '';
                            url.value = '';
                        }
                    });
                }
            });

            const seriesToolsClick = document.querySelector('.series-tools-click');
            const seriesToolsMenu = document.querySelector('.series-tools-menu');
            seriesToolsClick.addEventListener('click', function () {
                seriesToolsMenu.classList.toggle('active');
            });

            const seriesToolsLocalizedName = document.querySelector('#localized-name');
            const seriesToolsLocalizedOverview = document.querySelector('#localized-overview');
            const seriesToolsAdditionalOverview = document.querySelector('#additional-overview');
            const overviews = document.querySelectorAll('.overview');
            const localizedNameForm = document.querySelector('.localized-name-form');
            const overviewForm = document.querySelector('.overview-form');
            const deleteOverviewForm = document.querySelector('.delete-overview-form');
            const lnForm = document.querySelector('#localized-name-form');
            const lnCancel = lnForm.querySelector('button[type="button"]');
            const lnDelete = lnForm.querySelector('button[value="delete"]');
            const lnAdd = lnForm.querySelector('button[value="add"]');
            const ovForm = document.querySelector('#overview-form');
            const ovCancel = ovForm.querySelector('button[type="button"]');
            const ovAdd = ovForm.querySelector('button[value="add"]');
            const deleteOvForm = document.querySelector('#delete-overview-form');
            const deleteOvCancel = deleteOvForm.querySelector('button[type="button"]');
            const deleteOvDelete = deleteOvForm.querySelector('button[value="delete"]');

            seriesToolsLocalizedName.addEventListener('click', function () {
                localizedNameForm.classList.add('display');
                setTimeout(function () {
                    localizedNameForm.classList.add('active');
                }, 0);
            });
            lnCancel.addEventListener('click', function () {
                localizedNameForm.classList.remove('active');
                setTimeout(function () {
                    localizedNameForm.classList.remove('display');
                }, 300);
            });
            lnDelete?.addEventListener('click', function (event) {
                event.preventDefault();

                fetch('/' + lang + '/series/delete/localized/name/' + {{ series.id }}, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({locale: lang})
                }).then(function (response) {
                    if (response.ok) {
                        hideForm(localizedNameForm);
                        const localizedNameSpan = document.querySelector('.localized-name-span');
                        localizedNameSpan.remove();
                    }
                });
            });
            lnAdd.addEventListener('click', function (event) {
                event.preventDefault();

                const name = lnForm.querySelector('#name');
                const errors = lnForm.querySelectorAll('.error');
                errors.forEach(function (error) {
                    error.textContent = '';
                });
                if (!name.value) {
                    name.nextElementSibling.textContent = '{{ 'This field is required'|trans }}';
                } else {
                    fetch('/' + lang + '/series/add/localized/name/' + {{ series.id }}, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({name: name.value})
                    }).then(function (response) {
                        if (response.ok) {
                            hideForm(localizedNameForm);
                            const localizedNameSpan = document.querySelector('.localized-name-span');
                            if (localizedNameSpan) {
                                localizedNameSpan.textContent = name.value;
                            } else {
                                const h1 = document.querySelector('h1');
                                const nameSpan = document.querySelector('.name-span');
                                const localizedNameSpan = document.createElement('span');
                                localizedNameSpan.classList.add('localized-name-span');
                                localizedNameSpan.textContent = name.value;
                                h1.insertBefore(localizedNameSpan, nameSpan);
                            }
                        }
                    });
                }
            });

            seriesToolsLocalizedOverview.addEventListener('click', function () {
                const firstRow = ovForm.querySelector('.form-row:first-child');
                const hiddenInputTool = ovForm.querySelector('#tool');
                hiddenInputTool.setAttribute('data-type', 'localized');
                hiddenInputTool.setAttribute('data-crud', 'add');
                firstRow.classList.add('hide');
                displayForm(overviewForm);
            });

            seriesToolsAdditionalOverview.addEventListener('click', function () {
                const firstRow = ovForm.querySelector('.form-row:first-child');
                const hiddenInputTool = ovForm.querySelector('#tool');
                hiddenInputTool.setAttribute('data-type', 'additional');
                hiddenInputTool.setAttribute('data-crud', 'add');
                firstRow.classList.remove('hide');
                displayForm(overviewForm);
            });

            ovCancel.addEventListener('click', function () {
                hideForm(overviewForm);
            });

            if (overviews) {
                overviews.forEach(function (overview) {
                    const type = overview.classList.contains('localized') ? 'localized' : 'additional';
                    const tools = overview.querySelector('.tools');
                    const edit = tools.querySelector('.edit');
                    const del = tools.querySelector('.delete');
                    edit.addEventListener('click', function () {
                        const id = this.getAttribute('data-id');
                        const content = overview.querySelector('.content').textContent;
                        const form = document.querySelector('.overview-form');
                        const hiddenInputTool = form.querySelector('#tool');
                        const overviewField = form.querySelector('#overview-field');
                        hiddenInputTool.value = id;
                        hiddenInputTool.setAttribute('data-type', type);
                        hiddenInputTool.setAttribute('data-crud', 'edit');
                        overviewField.value = content.trim();
                        const firstRow = form.querySelector('.form-row:first-child');
                        if (type === 'localized') {
                            firstRow.classList.add('hide');
                        } else {
                            firstRow.classList.remove('hide');
                        }
                        displayForm(overviewForm);
                    });
                    del.addEventListener('click', function () {
                        const id = this.getAttribute('data-id');
                        const overviewType = deleteOverviewForm.querySelector('#overview-type');
                        const overviewId = deleteOverviewForm.querySelector('#overview-id');
                        overviewType.value = type;
                        overviewId.value = id;
                        displayForm(deleteOverviewForm);
                    });
                });
            }

            deleteOvCancel.addEventListener('click', function () {
                hideForm(deleteOverviewForm);
            });

            ovAdd.addEventListener('click', function (event) {
                event.preventDefault();

                const source = ovForm.querySelector('#overview-source');
                const sourceError = source.closest('label').querySelector('.error');
                const overviewField = ovForm.querySelector('#overview-field');
                const overviewError = overviewField.closest('label').querySelector('.error');
                const hiddenInputTool = ovForm.querySelector('#tool');
                const errors = ovForm.querySelectorAll('.error');
                errors.forEach(function (error) {
                    error.textContent = '';
                });
                const type = hiddenInputTool.getAttribute('data-type');
                const additional = type === 'additional';
                if (additional && !source.value) {
                    sourceError.textContent = '{{ 'This field is required'|trans }}';
                    return;
                }
                if (!overviewField.value) {
                    overviewError.textContent = '{{ 'This field is required'|trans }}';
                    return;
                }
                let data = {source: source.value, overview: overviewField.value, type: type, crud: hiddenInputTool.getAttribute('data-crud'), locale: lang};

                fetch('/' + lang + '/series/add/edit/overview/' + seriesId, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                }).then(function (response) {
                    if (response.ok) {
                        hideForm(overviewForm);

                        const infos = document.querySelector('.infos');
                        let h4 = infos.querySelector('.' + type + '-h4'), overviewsDiv;
                        if (!h4) {
                            h4 = document.createElement('h4');
                            h4.classList.add(type + '-h4');
                            h4.textContent = type === 'localized' ? translations['Localized overviews'] : translations['Additional overviews'];
                            infos.appendChild(h4);

                            overviewsDiv = document.createElement('div');
                            overviewsDiv.classList.add(type);
                            overviewsDiv.classList.add('overviews');
                            infos.appendChild(overviewsDiv);
                        }
                        overviewsDiv = infos.querySelector('.' + type + '.overviews');

                        const newId = response.id;
                        /** @type {Source} */
                        const sourceRecord = response.source;

                        const overviewDiv = document.createElement('div');
                        overviewDiv.classList.add(type);
                        overviewDiv.classList.add('overview');
                        const contentDiv = document.createElement('div');
                        contentDiv.classList.add('content');
                        contentDiv.textContent = overviewField.value;
                        overviewDiv.appendChild(contentDiv);

                        const toolsDiv = document.createElement('div');
                        toolsDiv.classList.add('tools');
                        if (sourceRecord) {
                            const sourceDiv = document.createElement('div');
                            sourceDiv.classList.add('source');
                            if (sourceRecord.path) {
                                const sourceA = document.createElement('a');
                                sourceA.href = sourceRecord.path;
                                sourceA.setAttribute('data-title', sourceRecord.name);
                                sourceA.target = '_blank';
                                sourceA.rel = 'noopener noreferrer';
                                sourceDiv.appendChild(sourceA);
                                if (sourceRecord.logoPath) {
                                    const sourceImg = document.createElement('img');
                                    sourceImg.src = sourceRecord.logoPath;
                                    sourceImg.alt = sourceRecord.name;
                                    sourceA.appendChild(sourceImg);
                                } else {
                                    sourceA.textContent = sourceRecord.name;
                                }
                            } else {
                                sourceDiv.textContent = sourceRecord.name;
                            }
                            toolsDiv.appendChild(sourceDiv);
                        }
                        const localeDiv = document.createElement('div');
                        localeDiv.classList.add('locale');
                        localeDiv.textContent = lang.toUpperCase();
                        toolsDiv.appendChild(localeDiv);

                        const editDiv = document.createElement('div');
                        editDiv.classList.add('edit');
                        editDiv.setAttribute('data-id', newId);
                        editDiv.setAttribute('data-title', translations['Edit']);
                        const editI = document.createElement('i');
                        editI.classList.add('fas');
                        editI.classList.add('fa-pen');
                        editDiv.appendChild(editI);
                        toolsDiv.appendChild(editDiv);

                        const deleteDiv = document.createElement('div');
                        deleteDiv.classList.add('delete');
                        deleteDiv.setAttribute('data-id', newId);
                        deleteDiv.setAttribute('data-title', translations['Delete']);
                        const deleteI = document.createElement('i');
                        deleteI.classList.add('fas');
                        deleteI.classList.add('fa-trash');
                        deleteDiv.appendChild(deleteI);
                        toolsDiv.appendChild(deleteDiv);

                        overviewDiv.appendChild(toolsDiv);

                        overviewsDiv.appendChild(overviewDiv);

                        overviewField.value = '';
                    }
                });
            });

            deleteOvDelete.addEventListener('click', function (event) {
                event.preventDefault();

                const overviewType = deleteOverviewForm.querySelector('#overview-type').value;
                const overviewId = deleteOverviewForm.querySelector('#overview-id').value;
                fetch('/' + lang + '/series/delete/overview/' + overviewId, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({overviewType: overviewType})
                }).then(function (response) {
                    if (response.ok) {
                        hideForm(deleteOverviewForm);
                        const overviewDiv = document.querySelector('.' + overviewType + '.overview[data-id="' + overviewId + '"]');
                        overviewDiv.remove();
                        const localizedOverviewDivs = document.querySelectorAll('.' + overviewType + '.overview');
                        if (localizedOverviewDivs.length === 0) {
                            document.querySelector('.' + overviewType + '-h4').remove();
                            document.querySelector('.' + overviewType + '.overviews').remove();
                        }
                    }
                });
            });
        });

        function displayForm(form) {
            form.classList.add('display');
            setTimeout(function () {
                form.classList.add('active');
            }, 0);
        }

        function hideForm(form) {
            form.classList.remove('active');
            setTimeout(function () {
                form.classList.remove('display');
            }, 300);
        }
    </script>
{% endblock %}
