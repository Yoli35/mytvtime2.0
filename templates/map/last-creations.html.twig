{% extends 'base.html.twig' %}

{% block title %}my Tv Time → {{ 'Recent additions'|trans }}{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('styles/filter.scss') }}">
    <link rel="stylesheet" href="{{ asset('styles/home.scss') }}">
    <link rel="stylesheet" href="{{ asset('styles/series.scss') }}">
    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/v3.9.1/mapbox-gl.css">
{% endblock %}

{% block shift %}{{ ux_icon('mdi:apple-keyboard-shift', {height: '18px', width: '18px'}) }}{% endblock %}
{% block arrowUp %}{{ ux_icon('gg:arrow-up-r', {height: '18px', width: '18px'}) }}{% endblock %}
{% block arrowDown %}{{ ux_icon('gg:arrow-down-r', {height: '18px', width: '18px'}) }}{% endblock %}
{% block arrowRight %}{{ ux_icon('gg:arrow-right-r', {height: '18px', width: '18px'}) }}{% endblock %}
{% block arrowLeft %}{{ ux_icon('gg:arrow-left-r', {height: '18px', width: '18px'}) }}{% endblock %}

{% block body %}
    {% include('_blocks/_menu.html.twig') %}
    <div class="container-fluid">
        <div class="series-map">
            <div class="series-map-header">
                <h1>{{ 'Recent additions'|trans }}</h1>
                <div class="numbers">
                    <div data-title="{{ filmingLocationCount }} {{ 'locations'|trans }}">{{ filmingLocationCount }} {{ ux_icon('fa6-solid:map-location-dot', {height: '32px', width: '32px'}) }}</div>
                    <div data-title="{{ filmingLocationImageCount }} {{ 'images'|trans }}">{{ filmingLocationImageCount }} {{ ux_icon('fa:picture-o', {height: '32px', width: '32px'}) }}</div>
                </div>
            </div>
            <div id="map" class="map-controller all"></div>
        </div>

        <div class="series-map-list center">
            <div class="map-tools">
                <div class="help">?</div>
                <div class="keyboard-help">
                    <div>{{ 'Click the map to copy the latitude and longitude to the clipboard'|trans }}</div>
                    <div></div>
                    <div>= / +: {{ 'Increase the zoom level by 1'|trans }}.</div>
                    <div>{{ block('shift') }} = / {{ block('shift') }} +: {{ 'Increase the zoom level by 2'|trans }}.</div>
                    <div>-: {{ 'Decrease the zoom level by 1'|trans }}.</div>
                    <div>{{ block('shift') }} -: {{ 'Decrease the zoom level by 2'|trans }}.</div>
                    <div>{{ 'Arrow keys'|trans }}: {{ 'Pan by 100 pixels'|trans }}.</div>
                    <div>{{ block('shift') }} {{ block('arrowRight') }}: {{ 'Increase the rotation by 15 degrees'|trans }}.</div>
                    <div>{{ block('shift') }} {{ block('arrowLeft') }}: {{ 'Decrease the rotation by 15 degrees'|trans }}.</div>
                    <div>{{ block('shift') }} {{ block('arrowUp') }}: {{ 'Increase the pitch by 10 degrees'|trans }}.</div>
                    <div>{{ block('shift') }} {{ block('arrowDown') }}: {{ 'Decrease the pitch by 10 degrees'|trans }}.</div>
                </div>
            </div>
            <div class="thumbnails">
                {% for s in settings.data.styles %}
                    <div class="thumbnail{% if loop.index0==2 %} selected{% endif %}" data-style="{{ s.style }}">
                        <h5>{{ s.name }}</h5>
                        <img src="{{ s.local_path }}" alt="{{ s.name }}">
                    </div>
                {% endfor %}
            </div>
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const thumbnails = document.querySelectorAll('.thumbnail');
                    thumbnails.forEach(thumbnail => {
                        thumbnail.addEventListener('click', setMapStyle);
                    });

                    /*const allSeriesLocations = document.querySelector('.all-series-locations');
                    const seriesLocations = allSeriesLocations.querySelectorAll('.series-locations');
                    seriesLocations.forEach(loc => {
                        const toCountry = loc.querySelector('.to-country');
                        const toMarkers = loc.querySelector('.to-markers');
                        toCountry.addEventListener('click', zoomToSeriesCountry);
                        toMarkers.addEventListener('click', zoomToSeriesLocations);
                    });*/
                });

                function zoomToSeriesCountry(e) {
                    const target = e.currentTarget;
                    const locationsButton = target.parentElement.querySelector('.to-markers');
                    locationsButton.classList.remove('active');
                    target.classList.add('active');
                    const countryCode = target.getAttribute('data-country');
                    const select = document.getElementById('fl-country-bb-select');
                    select.selectedIndex = getSelectIndex(select, countryCode);
                    zoomToCountry();
                }

                function zoomToSeriesLocations(e) {
                    const target = e.currentTarget;
                    const countryButton = target.parentElement.querySelector('.to-country');
                    countryButton.classList.remove('active');
                    target.classList.add('active');
                    let minLat = parseFloat(target.getAttribute('data-min-lat'));
                    let maxLat = parseFloat(target.getAttribute('data-max-lat'));
                    let minLng = parseFloat(target.getAttribute('data-min-lng'));
                    let maxLng = parseFloat(target.getAttribute('data-max-lng'));
                    minLat -= 0.1;
                    maxLat += 0.1;
                    minLng -= 0.1;
                    maxLng += 0.1;
                    map.fitBounds([[minLng, minLat], [maxLng, maxLat]]);
                }

                function setMapStyle(event) {
                    const thumbnails = document.querySelectorAll('.thumbnail');
                    thumbnails.forEach(thumbnail => {
                        thumbnail.classList.remove('selected');
                    });
                    const thumbnail = event.currentTarget;
                    thumbnail.classList.add('selected');
                    const style = thumbnail.getAttribute('data-style');
                    map.setStyle(style);
                }
            </script>
            <div class="all-series-locations">
                {#
                #filmingLocations" => array:50 [▼
                    0 => array:15 [▼
                      "id" => 565
                      "is_series" => 1
                      "tmdb_id" => 276051
                      "title" => "GELBOYS"
                      "location" => "Wat Pathum Wanaram School"
                      "description" => "Wat Pathum Wanaram School - 969, 1 Ratchadamri Rd, Pathum Wan, Bangkok 10330, Thaïlande"
                      "latitude" => 13.747698775896
                      "longitude" => 100.5360009623
                      "still_id" => 852
                      "uuid" => "ebb3bf43-b070-4a9a-8136-c401c0938287"
                      "origin_country" => "["TH"]"
                      "created_at" => "2025-02-22 21:05:49"
                      "updated_at" => "2025-02-22 21:05:50"
                      "still_path" => "/gelboys-wat-pathum-wanaram-school-1.webp"
                      "filmingLocationImages" => array:8 [▼
                        0 => array:3 [▼
                          "id" => 852
                          "filming_location_id" => 565
                          "path" => "/gelboys-wat-pathum-wanaram-school-1.webp"
                        ]
                        ...
                   ]
               ]
                #}

                {# <div class="series-location-header">
                            <a href="{{ path('app_series_tmdb', { 'id': key, slug: l.locations.0.title|slug }) }}" target="_blank">
                                {{ l.locations.0.title }} ({{ l.locations|length }})
                            </a>
                            <div class="zoom-to">
                                {{ 'Zoom to'|trans }}
                                <div class="buttons">
                                    <div class="to-country active" data-country="{{ l.country.0 }}">
                                        {{ l.country.0|country_name }}
                                    </div>
                                    <div class="to-markers"
                                         data-min-lat="{{ min(l.locations|map(loc => loc.latitude)) }}"
                                         data-max-lat="{{ max(l.locations|map(loc => loc.latitude)) }}"
                                         data-min-lng="{{ min(l.locations|map(loc => loc.longitude)) }}"
                                         data-max-lng="{{ max(l.locations|map(loc => loc.longitude)) }}"
                                    >
                                        {{ 'Locations'|trans }}
                                    </div>
                                </div>
                            </div>
                        </div> #}
                <div class="series-locations">
                    <div class="series-location-content">
                        {% for loc in locations %}
                            {#                            {{ dump(loc) }} #}
                            <div class="series-location" data-tmdb-id="{{ loc.tmdb_id }}">
                                <div class="series-location-image" data-title="{{ loc.location }}">
                                    <img src="/images/map{{ loc.still_path }}" alt="{{ loc.location ?? 'No title entry!!' }}">
                                    <div class="image-count">{{ loc.filmingLocationImages|length }}</div>
                                    <div class="image-list">
                                        {% for image in loc.filmingLocationImages %}
                                            <img src="/images/map{{ image.path }}" alt="{{ loc.title }} #{{ loop.index }}">
                                        {% endfor %}
                                    </div>
                                </div>
                                <div class="series-location-title">
                                    <div class="text">{{ loc.location ?? 'No title entry!!' }}</div>
                                    <!-- Lien vers Google Maps -->
                                    <div class="google-maps">
                                        <a href="https://www.google.com/maps?q={{ loc.latitude }},{{ loc.longitude }}" target="_blank">
                                            {{ ux_icon('logos:google-maps', {height: '36px', width: '36px'}) }}
                                        </a>
                                    </div>
                                </div>
                                <div class="series-location-location">{{ loc.location }}</div>
                                <div class="series-location-description">{{ loc.description }}</div>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
        {% include('_blocks/_footer.html.twig') %}
    </div>
    <div id="globs-map" style="display: none">{# {{ locations|json_encode(constant('JSON_PRETTY_PRINT'))|raw }} #}
        {
        "locations": {{ locations|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}
        }
    </div>
    <script src="https://api.mapbox.com/mapbox-gl-js/v3.9.1/mapbox-gl.js"></script>
    <script>
        const L = window.L;
        const globsData = document.querySelector('#globs-map');
        console.log(globsData);
        const data = JSON.parse(globsData.textContent);
        const locations = data.locations;
        const latLngs = locations.map(location => [location.latitude, location.longitude]);
        let map;

        mapboxgl.accessToken = 'pk.eyJ1IjoiaWJveTQ0IiwiYSI6ImNtNTZqcXo4ZjAxYzIyaXM3cWZ5dnNheWkifQ.yY-zdieRm3Dhlrj3vYh9hg';
        map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/outdoors-v12',
            projection: 'globe', // Display the map as a globe, since satellite-v9 defaults to Mercator
            zoom: 2.5,
            center: [105.6710599319008, 23.933327611870226]//[2, 45]
        });
        map.addControl(new mapboxgl.NavigationControl());
        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true,
            showUserHeading: true
        }));
        map.on('style.load', () => {
            map.setFog({
                "range": [0.8, 1.2],
                "color": "#E0861F",
                "horizon-blend": 0.125,
                "high-color": "#112a67",
                "space-color": "#000000",
                "star-intensity": 0.15
            }); // Set the default atmosphere style
        });
        map.on('click', (e) => {
            console.log(`A click event has occurred at ${e.lngLat}`);
            // Copier les coordonnées (e.lnglat) dans le presse-papiers sous la forme "lat, lng"
            navigator.clipboard.writeText(`${e.lngLat.lat}, ${e.lngLat.lng}`);
        });
        locations.forEach(location => {
            let marker = new mapboxgl.Marker({color: "#B46B18FF"})
                .setLngLat([location.longitude, location.latitude])
                .setPopup(new mapboxgl.Popup().setHTML('<div class="leaflet-popup-content-title">' + location.title + '</div><div class="leaflet-popup-content-description">' + location.description + '</div><div class="leaflet-popup-content-image"><img src="/images/map' + location['still_path'] + '" alt="' + location['title'] + '" style="height: auto; width: 100%"></div>'))
                .addTo(map);
            let markerIcon = marker.getElement();
            markerIcon.setAttribute('data-tmdb-id', location.tmdb_id);
            // markerIcon.setAttribute('data-country', location.country);
            markerIcon.setAttribute('data-latitude', location.latitude);
            markerIcon.setAttribute('data-longitude', location.longitude);
        });
    </script>
{% endblock %}
