{% extends 'base.html.twig' %}

{% block title %}my Tv Time â†’ {{ 'Shooting locations for your %d series'|trans|format(seriesCount) }}{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('styles/filter.scss') }}">
    <link rel="stylesheet" href="{{ asset('styles/home.scss') }}">
    <link rel="stylesheet" href="{{ asset('styles/series.scss') }}">
    {% if leaflet %}
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    {% endif %}
    {% if mapbox %}
        <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/v3.9.1/mapbox-gl.css">
        <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.3/mapbox-gl-geocoder.css" type="text/css">
    {% endif %}
{% endblock %}

{% block shift %}{{ ux_icon('mdi:apple-keyboard-shift') }}{% endblock %}
{% block arrowUp %}{{ ux_icon('gg:arrow-up-r') }}{% endblock %}
{% block arrowDown %}{{ ux_icon('gg:arrow-down-r') }}{% endblock %}
{% block arrowRight %}{{ ux_icon('gg:arrow-right-r') }}{% endblock %}
{% block arrowLeft %}{{ ux_icon('gg:arrow-left-r') }}{% endblock %}

{% block body %}
    {% include('_blocks/_menu.html.twig') %}
    <div class="container-fluid">
        <div class="series-map">
            <div class="series-map-header">
                <h1>{{ 'Shooting locations for %d series'|trans|format(seriesCount) }}</h1>
                <div class="numbers">
                    <div data-title="{{ filmingLocationCount }} {{ 'locations'|trans }}">{{ filmingLocationCount }} {{ ux_icon('fa6-solid:map-location-dot', {height: '32px', width: '32px'}) }}</div>
                    <div data-title="{{ filmingLocationImageCount }} {{ 'images'|trans }}">{{ filmingLocationImageCount }} {{ ux_icon('fa:picture-o', {height: '32px', width: '32px'}) }}</div>
                </div>
            </div>
            <div id="map" class="map-controller all"></div>
        </div>

        <div class="series-map-list center">
            <div class="map-tools">
                <h2>
                    <label for="fl-series-map-select">{{ 'Go to'|trans }}
                        <select id="fl-series-map-select">
                            <option value="" data-country="">{{ 'All series'|trans }}</option>
                            {% for key,l in fl %}
                                <option value="{{ key }}" data-country="{{ l.country.0 }}">{{ l.locations.0.title }} ({{ l.locations|length }})</option>
                            {% endfor %}
                        </select>
                    </label>
                    <label for="fl-country-map-select">{{ 'Locations'|trans }}
                        <select id="fl-country-map-select">
                            <option value="">{{ 'All countries'|trans }}</option>
                            {% for key,name in countries %}
                                <option value="{{ key }}">{{ name }}</option>
                            {% endfor %}
                        </select>
                    </label>
                    <label for="fl-country-bb-select">{{ 'Countries'|trans }}
                        <select id="fl-country-bb-select">
                            <option value="">{{ 'All countries'|trans }}</option>
                            {% for c in countryBoundingBoxes %}
                                <option value="{{ c.code }}"
                                        data-lat1="{{ c.lat1 }}" data-lng1="{{ c.lng1 }}"
                                        data-lat2="{{ c.lat2 }}" data-lng2="{{ c.lng2 }}"
                                >
                                    {{ c.displayName }}
                                </option>
                            {% endfor %}
                        </select>
                    </label>
                </h2>
                <div class="help">?</div>
                <div class="keyboard-help">
                    <div>{{ 'Click the map to copy the latitude and longitude to the clipboard'|trans }}</div>
                    <div></div>
                    <div>= / +: {{ 'Increase the zoom level by 1'|trans }}.</div>
                    <div>{{ block('shift') }} = / {{ block('shift') }} +: {{ 'Increase the zoom level by 2'|trans }}.</div>
                    <div>-: {{ 'Decrease the zoom level by 1'|trans }}.</div>
                    <div>{{ block('shift') }} -: {{ 'Decrease the zoom level by 2'|trans }}.</div>
                    <div>{{ 'Arrow keys'|trans }}: {{ 'Pan by 100 pixels'|trans }}.</div>
                    <div>{{ block('shift') }} {{ block('arrowRight') }}: {{ 'Increase the rotation by 15 degrees'|trans }}.</div>
                    <div>{{ block('shift') }} {{ block('arrowLeft') }}: {{ 'Decrease the rotation by 15 degrees'|trans }}.</div>
                    <div>{{ block('shift') }} {{ block('arrowUp') }}: {{ 'Increase the pitch by 10 degrees'|trans }}.</div>
                    <div>{{ block('shift') }} {{ block('arrowDown') }}: {{ 'Decrease the pitch by 10 degrees'|trans }}.</div>
                </div>
            </div>

            {{ include('_blocks/map/_thumbnails.html.twig', {styles: settings.data.styles}) }}

            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const flSeriesMapSelect = document.getElementById('fl-series-map-select');
                    const flCountryMapSelect = document.getElementById('fl-country-map-select');
                    const flCountryBbSelect = document.getElementById('fl-country-bb-select');
                    const thumbnails = document.querySelectorAll('.thumbnail');

                    flSeriesMapSelect.addEventListener('change', gotoLocation);
                    flCountryMapSelect.addEventListener('change', zoomToLocation);
                    flCountryBbSelect.addEventListener('change', zoomToCountry);

                    thumbnails.forEach(thumbnail => {
                        thumbnail.addEventListener('click', setMapStyle);
                    });

                    const allSeriesLocations = document.querySelector('.all-series-locations');
                    const seriesLocations = allSeriesLocations.querySelectorAll('.series-locations');
                    seriesLocations.forEach(loc => {
                        const toCountry = loc.querySelector('.to-country');
                        const toMarkers = loc.querySelector('.to-markers');
                        toCountry.addEventListener('click', zoomToSeriesCountry);
                        toMarkers.addEventListener('click', zoomToSeriesLocations);
                    });
                });

                function gotoLocation(e) {
                    /*const select = document.getElementById('fl-series-map-select');
                    const id = select.options[select.selectedIndex].value;
                    const locationH4 = document.querySelector(`h4[data-tmdb-id="${id}"]`);
                    locationH4.scrollIntoView({behavior: 'instant', block: 'center'});*/
                    const map = document.getElementById('map');
                    const allSeriesLocations = document.querySelector('.all-series-locations');
                    const select = e.currentTarget;
                    const value = select.options[select.selectedIndex].value;
                    let country;
                    if (value !== "") {
                        const markerToHide = map.querySelectorAll(`.mapboxgl-marker:not([data-tmdb-id="${value}"])`);
                        markerToHide.forEach(marker => {
                            marker.style.display = 'none';
                        });
                        const markerToShow = map.querySelectorAll(`.mapboxgl-marker[data-tmdb-id="${value}"]`);
                        markerToShow.forEach(marker => {
                            marker.style.display = 'block';
                        });
                        const seriesLocationsToHide = allSeriesLocations.querySelectorAll(`.series-locations:not([data-tmdb-id="${value}"])`);
                        const serieLocations = document.querySelector(`.series-locations[data-tmdb-id="${value}"]`);
                        seriesLocationsToHide.forEach(locationItem => {
                            locationItem.style.display = 'none';
                        });
                        serieLocations.style.display = "flex";
                        country = serieLocations?.getAttribute('data-country') || "";
                    } else {
                        const allSeriesLocationDivs = allSeriesLocations.querySelectorAll('.series-locations');
                        const allMarkers = map.querySelectorAll('.mapboxgl-marker');
                        allMarkers.forEach(marker => {
                            marker.style.display = 'block';
                        });
                        allSeriesLocationDivs.forEach(loc => {
                            loc.style.display = "flex";
                        });
                        country = "";
                    }
                    console.log(country);
                    const flCountryBbSelect = document.getElementById('fl-country-bb-select');
                    flCountryBbSelect.selectedIndex = getSelectIndex(flCountryBbSelect, country);
                    zoomToCountry();

                    // Lorsqu'on change de series, on veut que le bouton "Zoom to" soit actif pour les pays
                    const zoomToCountryButtons = document.querySelectorAll('.to-country');
                    zoomToCountryButtons.forEach(button => {
                        button.classList.add('active');
                    });
                    const zoomToMarkersButtons = document.querySelectorAll('.to-markers');
                    zoomToMarkersButtons.forEach(button => {
                        button.classList.remove('active');
                    });
                }

                function getSelectIndex(select, value) {
                    for (let i = 0; i < select.options.length; i++) {
                        if (select.options[i].value === value) {
                            return i;
                        }
                    }
                    return 0;
                }

                function zoomToSeriesCountry(e) {
                    const target = e.currentTarget;
                    const locationsButton = target.parentElement.querySelector('.to-markers');
                    locationsButton.classList.remove('active');
                    target.classList.add('active');
                    const countryCode = target.getAttribute('data-country');
                    const select = document.getElementById('fl-country-bb-select');
                    select.selectedIndex = getSelectIndex(select, countryCode);
                    zoomToCountry();
                }

                function zoomToSeriesLocations(e) {
                    const target = e.currentTarget;
                    const countryButton = target.parentElement.querySelector('.to-country');
                    countryButton.classList.remove('active');
                    target.classList.add('active');
                    let minLat = parseFloat(target.getAttribute('data-min-lat'));
                    let maxLat = parseFloat(target.getAttribute('data-max-lat'));
                    let minLng = parseFloat(target.getAttribute('data-min-lng'));
                    let maxLng = parseFloat(target.getAttribute('data-max-lng'));
                    minLat -= 0.1;
                    maxLat += 0.1;
                    minLng -= 0.1;
                    maxLng += 0.1;
                    map.fitBounds([[minLng, minLat], [maxLng, maxLat]]);
                }

                function zoomToLocation() {
                    const select = document.getElementById('fl-country-map-select');
                    const country = select.options[select.selectedIndex].value;
                    const leafletMarkerIcons = document.querySelectorAll('.leaflet-marker-icon');
                    const leafletMarkerShadows = document.querySelectorAll('.leaflet-marker-shadow');

                    if (country) {
                        const latLngs = countryBounds[country];
                        map.fitBounds(latLngs);

                        const locationIds = countryLocationIds[country];
                        leafletMarkerIcons.forEach(markerIcon => {
                            const tmdbId = markerIcon.getAttribute('data-tmdb-id');
                            if (locationIds.includes(parseInt(tmdbId))) {
                                markerIcon.style.display = 'block';
                            } else {
                                markerIcon.style.display = 'none';
                            }
                        });
                        leafletMarkerShadows.forEach(markerShadow => {
                            const tmdbId = markerShadow.getAttribute('data-tmdb-id');
                            if (locationIds.includes(parseInt(tmdbId))) {
                                markerShadow.style.display = 'block';
                            } else {
                                markerShadow.style.display = 'none';
                            }
                        });
                    } else {
                        map.fitBounds(latLngs);
                        leafletMarkerIcons.forEach(markerIcon => {
                            markerIcon.style.display = 'block';
                        });
                    }
                }

                function zoomToCountry() {
                    const select = document.getElementById('fl-country-bb-select');
                    const country = select.options[select.selectedIndex];
                    if (country.value === "") {
                        const center = map.getCenter();
                        map.setZoom(3);
                        map.easeTo({center, duration: 1000, easing: (n) => n});
                    } else {
                        // dans la base les latitudes et longitudes sont inversÃ©es
                        const lat1 = country.getAttribute('data-lat1');
                        const lng1 = country.getAttribute('data-lng1');
                        const lat2 = country.getAttribute('data-lat2');
                        const lng2 = country.getAttribute('data-lng2');
                        map.fitBounds([[lat1, lng1], [lat2, lng2]]);
                    }
                }

                function setMapStyle(event) {
                    const thumbnails = document.querySelectorAll('.thumbnail');
                    thumbnails.forEach(thumbnail => {
                        thumbnail.classList.remove('selected');
                    });
                    const thumbnail = event.currentTarget;
                    thumbnail.classList.add('selected');
                    const style = thumbnail.getAttribute('data-style');
                    map.setStyle(style);
                }
            </script>
            <div class="all-series-locations">
                {% for key,l in fl %}
                    <div class="series-locations" data-tmdb-id="{{ key }}" data-country="{{ l.country.0 }}">
                        <div class="series-location-header">
                            <a href="{{ path('app_series_tmdb', { 'id': key, slug: l.locations.0.title|slug }) }}" target="_blank">
                                {{ l.locations.0.title }} ({{ l.locations|length }})
                            </a>
                            <div class="zoom-to">
                                {{ 'Zoom to'|trans }}
                                <div class="buttons">
                                    <div class="to-country active" data-country="{{ l.country.0 }}">
                                        {{ l.country.0|country_name }}
                                    </div>
                                    <div class="to-markers"
                                         data-min-lat="{{ min(l.locations|map(loc => loc.latitude)) }}"
                                         data-max-lat="{{ max(l.locations|map(loc => loc.latitude)) }}"
                                         data-min-lng="{{ min(l.locations|map(loc => loc.longitude)) }}"
                                         data-max-lng="{{ max(l.locations|map(loc => loc.longitude)) }}"
                                    >
                                        {{ 'Locations'|trans }}
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="series-location-content">
                            {% for loc in l.locations %}
                                {#                    {{ dump(loc) }} #}
                                <div class="series-location" data-tmdb-id="{{ key }}">
                                    <div class="series-location-image" data-title="{{ loc.location }}" data-position="0">
                                        <img src="/images/map{{ loc.still_path }}" alt="{{ loc.location ?? 'No title entry!!' }}">
                                        <div class="image-count">{{ loc.filmingLocationImages|length }}</div>
                                        {% if loc.season_number and loc.episode_number %}
                                            <div class="episode">
                                                {{ 'S%02dE%02d'|format(loc.season_number, loc.episode_number) }}
                                            </div>
                                        {% endif %}
                                        <div class="image-list">
                                            {% for image in loc.filmingLocationImages %}
                                                <img src="/images/map{{ image.path }}" alt="{{ loc.title }} #{{ loop.index }}">
                                            {% endfor %}
                                        </div>
                                    </div>
                                    <div class="series-location-title">
                                        <div class="text">{{ loc.location ?? 'No title entry!!' }}</div>
                                        <!-- Lien vers Google Maps -->
                                        <div class="google-maps">
                                            <a href="https://www.google.com/maps?q={{ loc.latitude }},{{ loc.longitude }}" target="_blank">
                                                {{ ux_icon('logos:google-maps', {height: '36px', width: '36px'}) }}
                                            </a>
                                        </div>
                                    </div>
                                    <div class="series-location-location">{{ loc.location }}</div>
                                    <div class="series-location-description">{{ loc.description }}</div>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
        {% include('_blocks/_footer.html.twig') %}
    </div>
    <div id="globs-map" style="display: none">{# {{ locations|json_encode(constant('JSON_PRETTY_PRINT'))|raw }} #}
        {
        "locations": {{ locations|json_encode(constant('JSON_PRETTY_PRINT'))|raw }},
        "countryLatLngs": {{ countryLatLngs|json_encode(constant('JSON_PRETTY_PRINT'))|raw }},
        "countryLocationIds": {{ countryLocationIds|json_encode(constant('JSON_PRETTY_PRINT'))|raw }},
        "latitude": 2,
        "longitude": 45
        }
    </div>
    {% if leaflet %}
        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    {% endif %}
    {% if mapbox %}
        <script src="https://api.mapbox.com/mapbox-gl-js/v3.9.1/mapbox-gl.js"></script>
        <script src="/map/index.js"></script>
        <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.3/mapbox-gl-geocoder.min.js"></script>
    {% endif %}
    <script>
        const L = window.L;
        const globsData = document.querySelector('#globs-map');
        console.log(globsData);
        const data = JSON.parse(globsData.textContent);
        const locations = data.locations;
        const center = [data.latitude, data.longitude];
        const countryBounds = data.countryLatLngs;
        const countryLocationIds = data.countryLocationIds;
        const latLngs = locations.map(location => [location.latitude, location.longitude]);
        console.log(countryBounds);
        let map;

        mapboxgl.accessToken = 'pk.eyJ1IjoiaWJveTQ0IiwiYSI6ImNtNTZqcXo4ZjAxYzIyaXM3cWZ5dnNheWkifQ.yY-zdieRm3Dhlrj3vYh9hg';
        map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/outdoors-v12',
            projection: 'globe', // Display the map as a globe, since satellite-v9 defaults to Mercator
            zoom: 5,
            center: center,
        });
        map.on('style.load', () => {
            map.setFog({
                "range": [0.8, 1.2],
                "color": "#E0861F",
                "horizon-blend": 0.125,
                "high-color": "#112a67",
                "space-color": "#000000",
                "star-intensity": 0.15
            }); // Set the default atmosphere style
        });
        map.on('click', (e) => {
            console.log(`A click event has occurred at ${e.lngLat}`);
            // Copier les coordonnÃ©es (e.lnglat) dans le presse-papiers sous la forme "lat, lng"
            navigator.clipboard.writeText(`${e.lngLat.lat}, ${e.lngLat.lng}`);
        });

        mapboxgl.setRTLTextPlugin('https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js');
        const language = new MapboxLanguage();
        map.on('style.load', () => {
            map.setStyle(language.setLanguage(map.getStyle(), '{{ app.locale }}'));
        });

        map.addControl(
            new MapboxGeocoder({
                accessToken: mapboxgl.accessToken,
                mapboxgl: mapboxgl
            })
        );
        map.addControl(new mapboxgl.NavigationControl());
        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true,
            showUserHeading: true
        }));
        map.addControl(new mapboxgl.ScaleControl());

        locations.forEach(location => {
            let marker = new mapboxgl.Marker({color: "#B46B18FF"})
                .setLngLat([location.longitude, location.latitude])
                .setPopup(new mapboxgl.Popup().setHTML('<div class="leaflet-popup-content-title">' + location.title + '</div><div class="leaflet-popup-content-description">' + location.description + '</div><div class="leaflet-popup-content-image"><img src="/images/map' + location['still_path'] + '" alt="' + location['title'] + '" style="height: auto; width: 100%"></div>'))
                .addTo(map);
            let markerIcon = marker.getElement();
            markerIcon.setAttribute('data-tmdb-id', location.tmdb_id);
            // markerIcon.setAttribute('data-country', location.country);
            markerIcon.setAttribute('data-latitude', location.latitude);
            markerIcon.setAttribute('data-longitude', location.longitude);
        });

        // TODO: Add a handler to modify the map and canvas height
        const mapDiv = document.getElementById('map');
        const mapboxglControlContainerDiv = mapDiv.querySelector('.mapboxgl-control-container');
        const handleDiv = document.createElement('div');
        handleDiv.classList.add('height-handle');
        mapboxglControlContainerDiv.appendChild(handleDiv);
        // Use this handler to modify the map height
        handleDiv.addEventListener('mousedown', (e) => {
            e.preventDefault();
            let startY = e.clientY;
            let startHeight = mapDiv.clientHeight;
            document.addEventListener('mousemove', moveHandler);
            document.addEventListener('mouseup', () => {
                document.removeEventListener('mousemove', moveHandler);
            });

            function moveHandler(e) {
                const diff = e.clientY - startY;
                mapDiv.style.height = startHeight + diff + 'px';
                // and the canvas
                // const canvas = mapDiv.querySelector('.mapboxgl-canvas');
                // canvas.style.height = startHeight + diff + 'px';
            }
        });

        const seriesLocationImages = document.querySelectorAll('.series-location-image');
        seriesLocationImages.forEach(image => {
            image.addEventListener('mouseenter', () => {
                image.addEventListener('mousemove', getPosition);
            });
            image.addEventListener('mouseleave', () => {
                image.removeEventListener('mousemove', getPosition);
                const imageList = image.querySelector('.image-list');
                image.setAttribute('data-position', "0");
                const imageSrc = imageList.children[0].getAttribute('src');
                image.querySelector('img').setAttribute('src', imageSrc);
            });
        });

        function getPosition(e) {
            const image = e.currentTarget;
            const imageList = image.querySelector('.image-list');
            const count = imageList.children.length;
            const imageWidth = image.clientWidth;
            const position = Math.floor(e.offsetX / (imageWidth / count));
            const oldPosition = parseInt(image.getAttribute('data-position'));
            if (oldPosition !== position) {
                image.setAttribute('data-position', position);
                const imageSrc = imageList.children[position].getAttribute('src');
                image.querySelector('img').setAttribute('src', imageSrc);
                const toolTips = document.querySelector('.tool-tips.show');
                const toolTipsImg = toolTips?.querySelector('img');
                if (toolTipsImg) {
                    toolTipsImg.style.filter = 'brightness(0.5)';
                    toolTipsImg.setAttribute('src', imageSrc);
                    toolTipsImg.onload = () => {
                        toolTipsImg.style.filter = 'none';
                    };
                }
            }
        }
    </script>
{% endblock %}
