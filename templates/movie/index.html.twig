{% extends 'base.html.twig' %}

{% block title %}my Tv Time â†’ {{ 'Movies'|trans }}{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('styles/filter.scss') }}">
    <link rel="stylesheet" href="{{ asset('styles/home.scss') }}">
    <link rel="stylesheet" href="{{ asset('styles/movie.scss') }}">
{% endblock %}

{% block body %}
    {% include('_blocks/_menu.html.twig') %}
    <div class="container-fluid movie-index filter-page">

        <h1>{{ 'My movies'|trans }}</h1>
        <aside>
            <article>
                <header>
                    <div class="title">{{ 'Filters'|trans }}</div>
                    <div class="filter-values">
                        <div id="sort-value" class="filter-value" data-title="{{ 'Sort'|trans }} / {{ 'Order'|trans }}">{{ ux_icon('ion:settings-outline', {height: '18px', width: '18px'}) }}: <span>{{ filterMeanings[filters.sort]|trans }} / {{ filterMeanings[filters.order]|trans }}</span></div>
                        <div id="per-value" class="filter-value" data-title="{{ 'Number of elements per page'|trans }}">{{ ux_icon('ion:apps-sharp', {height: '18px', width: '18px'}) }}: <span>{{ filters.perPage }}</span></div>
                    </div>
                    <div class="collapse" data-for="filters" data-title="{{ 'Show / hide filter options'|trans }}">
                        {% if filterBoxOpen %}
                            {{ ux_icon('ion:chevron-collapse', {height: '18px', width: '18px'}) }}
                        {% else %}
                            {{ ux_icon('ion:chevron-expand', {height: '18px', width: '18px'}) }}
                        {% endif %}
                    </div>
                </header>
                <div class="filters{% if filterBoxOpen == 0 %} collapse{% endif %}">
                    <div class="filter">
                        <label for="per-page">{{ 'Number of elements per page'|trans }}
                            <select id="per-page">
                                {% for number in [10, 20, 50, 100] %}
                                    <option value="{{ number }}"{% if filters.perPage==number %} selected{% endif %}>{{ number }}</option>
                                {% endfor %}
                            </select>
                        </label>
                    </div>
                    <div class="filter">
                        <label for="title-filter">{{ 'Title'|trans }}
                            <input type="search" id="title-filter" name="title-filter" value="{{ filters.title }}" {% if filters.title|length %} autofocus{% endif %}>
                        </label>
                    </div>
                    <div class="filter">
                        <label for="sort-by">{{ 'Sort'|trans }}
                            <select id="sort-by">
                                <option value="name"{% if filters.sort=='name' %} selected{% endif %}>{{ 'Name'|trans }}</option>
                                <option value="releaseDate"{% if filters.sort=='releaseDate' %} selected{% endif %}>{{ 'Release date'|trans }}</option>
                                <option value="addedAt"{% if filters.sort=='addedAt' %} selected{% endif %}>{{ 'Date added'|trans }}</option>
                            </select>
                        </label>
                    </div>
                    <div class="filter">
                        <label for="order-by">{{ 'Order'|trans }}
                            <select id="order-by">
                                <option value="DESC"{% if filters.order=='DESC' %} selected{% endif %}>{{ 'Descending'|trans }}</option>
                                <option value="ASC"{% if filters.order=='ASC' %} selected{% endif %}>{{ 'Ascending'|trans }}</option>
                            </select>
                        </label>
                    </div>
                </div>
            </article>
            <article>
                <header>
                    <div class="title">{{ 'Pages'|trans }}</div>
                    <div class="pagination">
                        <button id="previous-page" class="page">{{ ux_icon('fa6-solid:arrow-left', {height: '16px', width: '16px'}) }}</button>
                        <button id="current-page" class="page active">{{ filters.page }}</button>
                        <button id="next-page" class="page">{{ ux_icon('fa6-solid:arrow-right', {height: '16px', width: '16px'}) }}</button>
                    </div>
                    <div class="collapse" data-for="pages" data-title="{{ 'Show / hide pages'|trans }}">
                        {% if pageBoxOpen %}
                            {{ ux_icon('ion:chevron-collapse', {height: '18px', width: '18px'}) }}
                        {% else %}
                            {{ ux_icon('ion:chevron-expand', {height: '18px', width: '18px'}) }}
                        {% endif %}
                    </div>
                </header>
                <div class="pages{% if pageBoxOpen == 0 %} collapse{% endif %}">
                    {% for page in 1..pages %}
                        <button class="page{% if page==filters.page %} active{% endif %}" value="{{ page }}">{{ page }}</button>
                    {% endfor %}
                </div>
            </article>
        </aside>
        <main>
            <article>
                <header>
                    <div class="title">{{ 'My movies'|trans }} (<span id="movie-count">{{ userMovieCount }}</span>)</div>
                </header>
                <div class="wrapper">
                    {% for movie in userMovies %}
                        {{ include('_blocks/movie/_card.html.twig') }}
                    {% endfor %}
                </div>
            </article>
        </main>

        {% include('_blocks/_footer.html.twig') %}
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        const svgPathCollapse = '<path fill="currentColor" d="M117.863 88.282c-8.681 10.017-7.598 25.174 2.419 33.855l120 104c9.02 7.818 22.416 7.818 31.436 0l120-104c10.017-8.681 11.1-23.838 2.419-33.855s-23.839-11.099-33.855-2.418L256 176.241L151.718 85.864c-10.016-8.681-25.174-7.598-33.855 2.418m0 335.436c-8.681-10.017-7.598-25.174 2.419-33.855l120-104c9.02-7.818 22.416-7.818 31.436 0l120 104c10.017 8.681 11.1 23.838 2.419 33.855s-23.839 11.099-33.855 2.418L256 335.759l-104.282 90.377c-10.016 8.681-25.174 7.598-33.855-2.418"></path>';
        const svgPathExpand = '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="48" d="m136 208l120-104l120 104m-240 96l120 104l120-104"></path>';
        const svgFavorite = '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 512 512"><path fill="currentColor" d="m47.6 300.4l180.7 168.7c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9l180.7-168.7c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141c-45.6-7.6-92 7.3-124.6 39.9l-12 12l-12-12c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5"/></svg>'
        document.addEventListener('DOMContentLoaded', function () {
            const lang = document.documentElement.lang;
            const collapseBoxes = document.querySelectorAll('.collapse');
            const sortSelect = document.getElementById('sort-by');
            const orderSelect = document.getElementById('order-by');
            const perPage = document.getElementById('per-page');
            const previousPage = document.getElementById('previous-page');
            const nextPage = document.getElementById('next-page');
            const titleFilter = document.getElementById('title-filter');
            const pages = document.querySelectorAll('.pages button');

            collapseBoxes.forEach(box => {
                box.addEventListener('click', function () {
                    const icon = box.querySelector('svg');
                    const article = box.closest('article');
                    const forBox = box.getAttribute('data-for');
                    const selector = '.' + forBox;
                    const div = article.querySelector(selector);
                    console.log({div});
                    console.log({forBox});
                    div.classList.toggle('collapse');
                    if (div.classList.contains('collapse')) {
                        icon.innerHTML = svgPathExpand;
                        saveBoxSettings(forBox, false);
                    } else {
                        icon.innerHTML = svgPathCollapse;
                        saveBoxSettings(forBox, true);
                    }
                });
            });

            pages.forEach(page => {
                page.addEventListener('click', function () {
                    document.querySelector('#current-page').textContent = page.value;
                    getMovies(getParams().concat({key: 'page', value: page.value}));
                });
            });
            previousPage.addEventListener('click', function () {
                const page = parseInt(document.querySelector('#current-page').textContent);
                if (page > 1) {
                    getPage(page - 1);
                }
            });
            nextPage.addEventListener('click', function () {
                const page = parseInt(document.querySelector('#current-page').textContent);
                if (page < pages.length) {
                    getPage(page + 1);
                }
            });

            titleFilter.addEventListener('input', function () {
                if (titleFilter.value.length > 2) {
                    getMovies(getParams().concat({key: 'page', value: 1}, {key: 'title', value: titleFilter.value}));
                }
            });

            sortSelect.addEventListener('change', function () {
                const sort = sortSelect.value;
                const order = orderSelect.value;
                document.querySelector("#sort-value span").textContent = sort + ' / ' + order;
                getMovies(getParams().concat({key: 'page', value: 1}));
            });
            orderSelect.addEventListener('change', function () {
                const sort = sortSelect.value;
                const order = orderSelect.value;
                document.querySelector("#sort-value span").textContent = sort + ' / ' + order;
                getMovies(getParams().concat({key: 'page', value: 1}));
            });
            perPage.addEventListener('change', function () {
                document.querySelector("#per-value span").textContent = perPage.value;
                getMovies(getParams().concat({key: 'page', value: 1}));
            });

            function getPage(newPage) {
                if (newPage > 0 && newPage <= pages.length) {
                    document.querySelector('#current-page').textContent = newPage;
                    getMovies(getParams().concat({key: 'page', value: newPage}));
                }
            }

            function getMovies(params) {
                fetch('/' + lang + '/movie/filter', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(params)
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        const movies = data.body['userMovies'];
                        const count = data.body['userMovieCount'];
                        const pages = data.body['pages'];
                        const movieCount = document.getElementById('movie-count');
                        movieCount.textContent = count;
                        const wrapper = document.querySelector('.wrapper');
                        wrapper.innerHTML = '';
                        movies.forEach(movie => {
                            wrapper.appendChild(card(movie));
                        });
                        const PagesDiv = document.querySelector('.pages');
                        const pageNumber = parseInt(document.querySelector('#current-page').textContent);
                        PagesDiv.innerHTML = '';
                        for (let i = 1; i <= pages; i++) {
                            const button = document.createElement('button');
                            const iString = i.toString();
                            button.classList.add('page');
                            button.value = iString;
                            button.textContent = iString;
                            if (i === pageNumber) {
                                button.classList.add('active');
                            }
                            button.addEventListener('click', function () {
                                document.querySelector('#current-page').textContent = iString;
                                getMovies(getParams().concat({key: 'page', value: i}));
                            });
                            PagesDiv.appendChild(button);
                        }
                    })
                    .catch(error => console.error(error));
            }

            function getParams() {
                return [
                    {key: 'sort', value: sortSelect.value},
                    {key: 'order', value: orderSelect.value},
                    {key: 'perPage', value: perPage.value},
                    {key: 'title', value: titleFilter.value}
                ];
            }

            function saveBoxSettings(box, open) {
                const data = {
                    'name': 'my movies boxes',
                    'box': {
                        'key': box,
                        'value': open
                    }
                };
                fetch('{{ path('app_series_settings_save') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => response.json())
                    .then(data => console.log(data))
                    .catch(error => console.error(error));
            }

            /* @param {
                userMovieId: number,
                title: string,
                releaseDate: date
                releaseDateString: string,
                posterPath: string,
                favorite: boolean,
                lastViewedAt: date
                lastViewedAtString: string
            } movie */
            function card(movie) {
                const card = document.createElement('div');
                card.classList.add('card');
                const a = document.createElement('a');
                {# a.href = '{{ path('app_movie_show', {'userMovieId': movie.userMovieId}) }}'; #}
                a.href = '/' + lang + '/movie/show/' + movie.userMovieId;
                const poster = document.createElement('div');
                poster.classList.add('poster');
                if (movie.posterPath) {
                    const img = document.createElement('img');
                    img.src = '/movies/posters/' + movie.posterPath;
                    img.alt = movie.title;
                    poster.appendChild(img);
                } else {
                    const div = document.createElement('div');
                    div.textContent = '{{ 'No poster'|trans }}';
                    poster.appendChild(div);
                }
                if (movie.favorite) {
                    const favorite = document.createElement('div');
                    favorite.classList.add('favorite');
                    favorite.innerHTML = svgFavorite;
                    poster.appendChild(favorite);
                }
                if (movie.lastViewedAtString) {
                    const viewed = document.createElement('div');
                    viewed.classList.add('viewed');
                    viewed.textContent = movie.lastViewedAtString;
                    poster.appendChild(viewed);
                }
                a.appendChild(poster);
                const infos = document.createElement('div');
                infos.classList.add('infos');
                const name = document.createElement('div');
                name.classList.add('name');
                name.textContent = movie.title;
                infos.appendChild(name);
                const date = document.createElement('div');
                date.classList.add('date');
                date.textContent = movie.releaseDateString;
                infos.appendChild(date);
                a.appendChild(infos);
                card.appendChild(a);

                return card;
            }
        });
    </script>
{% endblock %}
