{% extends 'base.html.twig' %}

{% block title %}my Tv Time â†’ {{ 'Movies'|trans }}{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('styles/home.scss') }}">
    <link rel="stylesheet" href="{{ asset('styles/movie.scss') }}">
{% endblock %}

{% block body %}
    {% include('_blocks/_menu.html.twig') %}
    <div class="container-fluid movie-index">

        <h1>{{ 'All my series'|trans }}</h1>
        <aside>
            <article>
                <header>
                    <div class="title">{{ 'Filters'|trans }}</div>
                    <div class="collapse" data-title="{{ 'Show / hide filter options'|trans }}">
                        {% if filterBoxOpen %}
                            {{ ux_icon('ion:chevron-collapse', {height: '18px', width: '18px'}) }}
                        {% else %}
                            {{ ux_icon('ion:chevron-expand', {height: '18px', width: '18px'}) }}
                        {% endif %}
                    </div>
                </header>
                <div class="filters{% if filterBoxOpen == 0 %} collapse{% endif %}">
                    <div class="filter">
                        <label for="per-page">{{ 'Number of elements per page'|trans }}
                            <select id="per-page">
                                {% for number in [10, 20, 50, 100] %}
                                    <option value="{{ number }}"{% if filters.perPage==number %} selected{% endif %}>{{ number }}</option>
                                {% endfor %}
                            </select>
                        </label>
                    </div>
                    <div class="filter">
                        <label for="title-filter">{{ 'Title'|trans }}
                            <input type="search" id="title-filter" name="title-filter" value="{{ filters.title }}" {% if filters.title|length %} autofocus{% endif %}>
                        </label>
                    </div>
                    <div class="filter">
                        <label for="sort-by">{{ 'Sort'|trans }}
                            <select id="sort-by">
                                <option value="name"{% if filters.sort=='name' %} selected{% endif %}>{{ 'Name'|trans }}</option>
                                <option value="releaseDate"{% if filters.sort=='releaseDate' %} selected{% endif %}>{{ 'Release date'|trans }}</option>
                            </select>
                        </label>
                    </div>
                    <div class="filter">
                        <label for="order-by">{{ 'Order'|trans }}
                            <select id="order-by">
                                <option value="DESC"{% if filters.order=='DESC' %} selected{% endif %}>{{ 'Descending'|trans }}</option>
                                <option value="ASC"{% if filters.order=='ASC' %} selected{% endif %}>{{ 'Ascending'|trans }}</option>
                            </select>
                        </label>
                    </div>
                </div>
            </article>
            <article>
                <div class="pages">
                    {% for page in 1..pages %}
                        <button class="page{% if page==filters.page %} active{% endif %}" value="{{ page }}">{{ page }}</button>
                    {% endfor %}
                </div>
            </article>
        </aside>
        <main>
            <article>
                <header>
                    <div class="title">{{ 'My movies'|trans }} ({{ userMovieCount }} {{ 'movies'|trans }})</div>
                    <div class="filter-values">
                        <div class="filter-value" data-title="{{ 'Sort'|trans }} / {{ 'Order'|trans }}">{{ ux_icon('ion:funnel', {height: '18px', width: '18px'}) }}: {{ filterMeanings[filters.sort]|trans }} / {{ filterMeanings[filters.order]|trans }}</div>
                        <div class="filter-value" data-title="{{ 'Number of elements per page'|trans }}">{{ ux_icon('ion:apps-sharp', {height: '18px', width: '18px'}) }}: {{ filters.perPage }}</div>
                    </div>
                </header>
                <div class="wrapper">
                    {% for movie in userMovies %}
                        {{ include('_blocks/movie/_card.html.twig') }}
                    {% endfor %}
                </div>
            </article>
        </main>

        {% include('_blocks/_footer.html.twig') %}
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        const svgPathCollapse = '<path fill="currentColor" d="M117.863 88.282c-8.681 10.017-7.598 25.174 2.419 33.855l120 104c9.02 7.818 22.416 7.818 31.436 0l120-104c10.017-8.681 11.1-23.838 2.419-33.855s-23.839-11.099-33.855-2.418L256 176.241L151.718 85.864c-10.016-8.681-25.174-7.598-33.855 2.418m0 335.436c-8.681-10.017-7.598-25.174 2.419-33.855l120-104c9.02-7.818 22.416-7.818 31.436 0l120 104c10.017 8.681 11.1 23.838 2.419 33.855s-23.839 11.099-33.855 2.418L256 335.759l-104.282 90.377c-10.016 8.681-25.174 7.598-33.855-2.418"></path>';
        const svgPathExpand = '<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="48" d="m136 208l120-104l120 104m-240 96l120 104l120-104"></path>';
        document.addEventListener('DOMContentLoaded', function () {
            const filtersCollapse = document.querySelector('.collapse');
            const filtersCollapseIcon = filtersCollapse.querySelector('svg');
            const filters = document.querySelector('.filters');
            const sortSelect = document.getElementById('sort-by');
            const orderSelect = document.getElementById('order-by');
            const perPage = document.getElementById('per-page');
            const titleFilter = document.getElementById('title-filter');
            const pages = document.querySelectorAll('.pages button');

            filtersCollapse.addEventListener('click', function () {
                filters.classList.toggle('collapse');
                if (filters.classList.contains('collapse')) {
                    filtersCollapseIcon.innerHTML = svgPathExpand;
                    saveFilterBoxSettings(false);
                } else {
                    filtersCollapseIcon.innerHTML = svgPathCollapse;
                    saveFilterBoxSettings(true);
                }
            });

            pages.forEach(page => {
                page.addEventListener('click', function () {
                    window.location.href = newUrl(window.location.href, getParams().concat({key: 'page', value: page.value}));
                });
            });

            titleFilter.addEventListener('input', function () {
                if (titleFilter.value.length > 2) {
                    window.location.href = newUrl(window.location.href, getParams().concat({key: 'page', value: 1}, {key: 'title', value: titleFilter.value}));
                }
            });

            sortSelect.addEventListener('change', function () {
                window.location.href = newUrl(window.location.href, getParams().concat({key: 'page', value: 1}));
            });
            orderSelect.addEventListener('change', function () {
                window.location.href = newUrl(window.location.href, getParams().concat({key: 'page', value: 1}));
            });
            perPage.addEventListener('change', function () {
                window.location.href = newUrl(window.location.href, getParams().concat({key: 'page', value: 1}));
            });

            function getParams() {
                return [
                    {key: 'sort', value: sortSelect.value},
                    {key: 'order', value: orderSelect.value},
                    {key: 'perPage', value: perPage.value},
                    {key: 'title', value: titleFilter.value}
                ];
            }

            function newUrl(href, params) {
                const url = new URL(href);
                params.forEach(param => {
                    url.searchParams.set(param.key, param.value);
                });
                return url.href;
            }

            function saveFilterBoxSettings(open) {
                const data = {
                    'name': 'my movies: filter box',
                    'value': {
                        'open': open
                    }
                };
                fetch('{{ path('app_series_settings_save') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => response.json())
                    .then(data => console.log(data))
                    .catch(error => console.error(error));
            }
        });
    </script>
{% endblock %}
